Kind origin type.
Kind loan type.
Kind point type.

/* input */
Type origin_live_on_entry origin -> point -> prop.
Type not_origin_live_on_entry origin -> point -> prop.
Type loan_issued_at origin -> loan -> point -> prop.
Type not_loan_issued_at origin -> loan -> point -> prop.
Type cfg_edge point -> point -> prop.
Type loan_invalidated_at loan -> point -> prop.
Type not_loan_killed_at loan -> point -> prop.
Type subset_base origin -> origin -> point -> prop.

Theorem OriginAxiom:
  forall Origin,
  forall Point,
  (origin_live_on_entry Origin Point) -> 
  (not_origin_live_on_entry Origin Point) -> false.
skip.

Theorem LoanAxiom:
  forall Origin,
  forall Point,
  forall Loan,
  (loan_issued_at Origin Loan Point) -> 
  (not_loan_issued_at Origin Loan Point) -> false.
skip.

Define dead_borrow_region_can_reach_root: origin -> point -> loan -> prop ,
       dead_borrow_region_can_reach_dead: origin -> point -> loan -> prop,
       dying_region_requires: origin -> point -> point -> loan -> prop ,
       live_to_dying_regions: origin -> origin -> point -> point -> prop ,
       dying_can_reach_origins: origin -> point -> point -> prop ,
       dying_can_reach: origin  -> origin -> point -> point -> prop,
       dying_can_reach_live: origin -> origin -> point -> point -> prop ,
       datafrog_opt_subset: origin -> origin -> point -> prop,
       datafrog_opt_origin_contains_loan_on_entry: origin -> loan -> point -> prop,
       datafrog_opt_loan_live_at: loan -> point -> prop,
       datafrog_opt_errors: loan -> point -> prop by

/* unfold 1 */
dead_borrow_region_can_reach_root Origin Point Loan :=
  loan_issued_at Origin  Loan  Point /\
  not_origin_live_on_entry Origin  Point ;

/* unfold 2 */
dead_borrow_region_can_reach_dead Origin Point Loan :=
  dead_borrow_region_can_reach_root Origin Point Loan;

/* unfold 3 */
dead_borrow_region_can_reach_dead  Origin2  Point  Loan  :=
  exists Origin1,
  dead_borrow_region_can_reach_dead Origin1  Point  Loan  /\
  datafrog_opt_subset Origin1  Origin2  Point  /\
  not_origin_live_on_entry Origin2  Point ;

/* unfold 4 */
dying_region_requires Origin  Point1  Point2  Loan  :=
  (datafrog_opt_origin_contains_loan_on_entry Origin  Loan  Point1  ) /\
  (not_loan_killed_at Loan  Point1  ) /\
  (cfg_edge Point1  Point2 ) /\
  (not_origin_live_on_entry Origin  Point2 );

/* unfold 5 */
live_to_dying_regions Origin1  Origin2  Point1  Point2  :=
  datafrog_opt_subset Origin1  Origin2  Point1  /\
  cfg_edge Point1  Point2  /\
  origin_live_on_entry Origin1  Point2  /\
  not_origin_live_on_entry Origin2  Point2 ;

/* unfold 6 */
dying_can_reach_origins Origin2  Point1  Point2  :=
  exists Origin1,
  live_to_dying_regions Origin1  Origin2  Point1  Point2 ;

/* unfold 7 */
dying_can_reach_origins Origin  Point1  Point2  :=
  exists Loan,
  dying_region_requires Origin  Point1  Point2  Loan ;

/* unfold 8 */
dying_can_reach Origin1  Origin2  Point1  Point2  :=
  dying_can_reach_origins Origin1  Point1  Point2 /\ 
  datafrog_opt_subset Origin1  Origin2  Point1 ;

/* unfold 9 */
dying_can_reach Origin1  Origin3  Point1  Point2  :=
  exists Origin2,
  dying_can_reach Origin1  Origin2  Point1  Point2   /\
  not_origin_live_on_entry Origin2  Point2 /\ 
  datafrog_opt_subset Origin2  Origin3  Point1 ;

/* unfold 10 */
dying_can_reach_live Origin1  Origin2  Point1  Point2  :=
  dying_can_reach Origin1  Origin2  Point1  Point2   /\
  origin_live_on_entry Origin2  Point2 ;

/* unfold 11 */
datafrog_opt_subset Origin1  Origin2  Point  :=
  subset_base Origin1  Origin2  Point ;

/* unfold 11 */
datafrog_opt_subset Origin1  Origin2  Point2  :=
  exists Point1,
  datafrog_opt_subset Origin1  Origin2  Point1   /\
  cfg_edge Point1  Point2  /\
  origin_live_on_entry Origin1  Point2   /\
  origin_live_on_entry Origin2  Point2 ;

/* unfold 12 */
datafrog_opt_subset Origin1  Origin3  Point2  :=
  exists Point1,
  exists Origin2,
  live_to_dying_regions Origin1  Origin2  Point1  Point2  /\
  dying_can_reach_live Origin2  Origin3  Point1  Point2 ;

/* unfold 13 */
datafrog_opt_origin_contains_loan_on_entry Origin  Loan  Point  :=
  loan_issued_at Origin  Loan  Point ;

/* unfold 14 */
datafrog_opt_origin_contains_loan_on_entry Origin  Loan  Point2  :=
  exists Point1,
  datafrog_opt_origin_contains_loan_on_entry Origin  Loan  Point1  /\
  (not_loan_killed_at Loan  Point1  ) /\
  cfg_edge Point1  Point2  /\
  origin_live_on_entry Origin  Point2 ;

/* unfold 15 */
datafrog_opt_origin_contains_loan_on_entry Origin2  Loan  Point2  :=
  exists Point1,
  exists Origin1,
  dying_region_requires Origin1  Point1  Point2  Loan  /\
  dying_can_reach_live Origin1  Origin2  Point1  Point2 ;

/* unfold 16 */
datafrog_opt_loan_live_at Loan  Point  :=
  exists Origin,
  datafrog_opt_origin_contains_loan_on_entry Origin  Loan  Point  /\
  origin_live_on_entry Origin  Point ;

/* unfold 17 */
datafrog_opt_loan_live_at Loan  Point  :=
  exists Origin1,
  exists Origin2,
  dead_borrow_region_can_reach_dead Origin1  Point  Loan  /\
  datafrog_opt_subset Origin1  Origin2  Point  /\
  origin_live_on_entry Origin2  Point ;

/* unfold 18 */
datafrog_opt_errors Loan  Point  :=
  loan_invalidated_at Loan  Point  /\
  datafrog_opt_loan_live_at Loan  Point .


Define  naive_subset: origin -> origin -> point -> prop,
        naive_origin_contains_loan_on_entry: origin -> loan -> point -> prop,
        naive_loan_live_at: loan -> point -> prop,
        naive_errors: loan -> point -> prop  by

/* 1 */
naive_subset Origin1  Origin2  Point  :=
  subset_base Origin1  Origin2  Point ;

/* 2 */
naive_subset Origin1  Origin2  Point2  :=
  exists Point1,
  naive_subset Origin1  Origin2  Point1 /\
  cfg_edge Point1  Point2 /\
  origin_live_on_entry Origin1  Point2 /\
  origin_live_on_entry Origin2  Point2 ;

/* 3 */
naive_subset Origin1  Origin3  Point  :=
  exists Origin2,
  naive_subset Origin1  Origin2  Point /\
  naive_subset Origin2  Origin3  Point ;

/* 4 */
naive_origin_contains_loan_on_entry Origin Loan Point  :=
  loan_issued_at Origin Loan Point ;

/* naive_origin_contains_loan_on_entry Origin Loan Point  := */
  /* cfg_node Point   */
  /* placeholder_Loan Origin  Loan ; */

/* 5 */
naive_origin_contains_loan_on_entry Origin2  Loan  Point  :=
  exists Origin1,
  naive_origin_contains_loan_on_entry Origin1  Loan  Point /\
  naive_subset Origin1  Origin2  Point ;

/* 6 */
naive_origin_contains_loan_on_entry Origin  Loan  Point2  :=
  exists Point1,
  (naive_origin_contains_loan_on_entry Origin  Loan  Point1) /\
  (not_loan_killed_at Loan  Point1 ) /\
  (cfg_edge Point1  Point2) /\
  (origin_live_on_entry Origin  Point2) ;

/* 7 */
naive_loan_live_at Loan  Point  :=
  exists Origin,
  naive_origin_contains_loan_on_entry Origin  Loan  Point /\
  origin_live_on_entry Origin  Point ;

/* 8 */
naive_errors Loan  Point  :=
  loan_invalidated_at Loan  Point /\
  naive_loan_live_at Loan  Point .



Define  my_subset: origin -> origin -> point -> prop,
        my_origin_contains_loan_on_entry: origin -> loan -> point -> prop by

my_subset Origin1  Origin2  Point  :=
  datafrog_opt_subset Origin1  Origin2  Point ;

my_subset Origin1  Origin3  Point  :=
  exists Origin2,
  datafrog_opt_subset Origin1  Origin2  Point /\
  my_subset Origin2  Origin3  Point ;

my_origin_contains_loan_on_entry Origin Loan Point  :=
  datafrog_opt_origin_contains_loan_on_entry Origin Loan Point ;

/* my_origin_contains_loan_on_entry Origin Loan Point  := */
  /* cfg_node Point   */
  /* placeholder_Loan Origin  Loan ; */

my_origin_contains_loan_on_entry Origin2  Loan  Point  :=
  exists Origin1,
  my_origin_contains_loan_on_entry Origin1  Loan  Point /\
  my_subset Origin1  Origin2  Point .

Theorem Axiom2: 
  forall Origin,
  forall Point,
  (origin_live_on_entry Origin Point ) \/ ( not_origin_live_on_entry Origin Point ).
skip.


Theorem Lemma92:
  forall Origin1,
  forall Origin2,
  forall Origin9,
  forall Point2,
  forall Point3,
  dying_can_reach Origin1 Origin2 Point2 Point3 ->
  my_subset Origin2 Origin9 Point2 ->
  origin_live_on_entry Origin9 Point3 ->
  (
    dying_can_reach_live Origin1 Origin9 Point2 Point3 \/
    (
      exists Origin5,
      dying_can_reach_live Origin1 Origin5 Point2 Point3 /\
      origin_live_on_entry Origin5 Point3 /\
      my_subset Origin5 Origin9 Point2
    )
  ).
induction on 2.
intros.
apply Axiom2 with Origin = Origin2 , Point = Point3.
case H4.
search.
case H2.
search.
assert dying_can_reach Origin1 Origin3 Point2 Point3.
apply IH to H8 H7 H3.
search.


Theorem Lemma90:
  forall Loan,
  forall Origin1,
  forall Origin9,
  forall Point2,
  forall Point3,
  dying_region_requires Origin1 Point2 Point3 Loan ->
  my_subset Origin1 Origin9 Point2 ->
  origin_live_on_entry Origin9 Point3 ->
  (
    datafrog_opt_origin_contains_loan_on_entry Origin9 Loan Point3 \/
    (
      exists Origin5,
      datafrog_opt_origin_contains_loan_on_entry Origin5 Loan Point3 /\
      origin_live_on_entry Origin5 Point3 /\
      my_subset Origin5 Origin9 Point2
    )
  ).
intros.
assert dying_can_reach_origins Origin1 Point2 Point3.
case H2.
search.
apply Axiom2 with Origin = Origin2 , Point = Point3.
case H7.
search.
assert dying_can_reach Origin1 Origin2 Point2 Point3.
apply Lemma92 to H9 H6 H3.
case H10.
search.
search.


Theorem Lemma91:
  forall Origin0,
  forall Origin1,
  forall Origin9,
  forall Point2,
  forall Point3,
  live_to_dying_regions Origin0 Origin1 Point2 Point3 ->
  my_subset Origin1 Origin9 Point2 ->
  origin_live_on_entry Origin9 Point3 ->
  (
    datafrog_opt_subset Origin0 Origin9 Point3 \/
    (
      exists Origin5,
      datafrog_opt_subset Origin0 Origin5 Point3 /\
      origin_live_on_entry Origin5 Point3 /\
      my_subset Origin5 Origin9 Point2
    )
  ).
intros.
assert dying_can_reach_origins Origin1 Point2 Point3.
case H2.
search.
apply Axiom2 with Origin = Origin2 , Point = Point3.
case H7.
search.
assert dying_can_reach Origin1 Origin2 Point2 Point3.
apply Lemma92 to H9 H6 H3.
case H10.
search.
search.


Theorem MySubsetConcat:
  forall Origin1,
  forall Origin2,
  forall Origin3,
  forall Point,
  my_subset Origin1 Origin2 Point ->
  my_subset Origin2 Origin3 Point ->
  my_subset Origin1 Origin3 Point. 
induction on 1.
intros.
case H1.
search.
apply IH to H4 H2.
search.


Theorem MySubsetPoint:
  forall Origin1,
  forall Origin9,
  forall Point1,
  forall Point2,
  cfg_edge Point1 Point2 ->
  my_subset Origin1 Origin9 Point1 ->
  origin_live_on_entry Origin1 Point2 ->
  origin_live_on_entry Origin9 Point2 ->
  my_subset Origin1 Origin9 Point2.
induction on 2.
intros.
case H2.
search.
apply Axiom2 with Origin = Origin2 , Point = Point2.
case H7.
apply IH to H1 H6 H8 H4.
search.
assert live_to_dying_regions Origin1 Origin2 Point1 Point2.
apply Lemma91 to H9 H6 H4.
case H10.
search.
/* 遇到了熟悉的问题 */

/*
Theorem NaiveSubset2MySubset:
  forall Point2,
  forall Origin1,
  forall Origin9,
  naive_subset Origin1 Origin9 Point2 ->
  my_subset Origin1 Origin9 Point2.
induction on 1.
intros.
case H1.
search.
apply IH to H2.
case H6.
search.
apply Axiom2 with Origin = Origin2 , Point = Point2.

*/
